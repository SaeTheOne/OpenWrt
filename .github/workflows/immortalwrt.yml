name: immortalwrt

on:
  workflow_dispatch:
  schedule:
    - cron: 0 20 * * *

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: master
  CONFIG_FILE: configs/immortalwrt.config
  DIY_SCRIPT: diy-script.sh
  CLASH_KERNEL: arm64
  CACHE_TOOLCHAIN: true
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: ROOTFS_PLUS
  OPENWRT_RELEASE: true
  OPENWRT_TAG: ARMv8_PLUS
  TZ: Asia/Shanghai
  BASE_PATH: "/home/runner/work/OpenWrt/OpenWrt"
  OPENWRT_DIR: "/home/runner/work/OpenWrt/OpenWrt/openwrt"
  STAGING_BIN: "/home/runner/work/OpenWrt/OpenWrt/openwrt/staging_dir/host/bin"
  INDEPENDENT_SED: "/home/runner/work/OpenWrt/OpenWrt/sed"  # 独立sed路径

jobs:
  Build:
    runs-on: ubuntu-22.04

    outputs:
      COMMIT_AUTHOR: ${{ steps.clone.outputs.COMMIT_AUTHOR }}
      COMMIT_DATE: ${{ steps.clone.outputs.COMMIT_DATE }}
      COMMIT_MESSAGE: ${{ steps.clone.outputs.COMMIT_MESSAGE }}
      COMMIT_HASH: ${{ steps.clone.outputs.COMMIT_HASH }}
      DEVICE_TARGET: ${{ steps.variable.outputs.DEVICE_TARGET }}
      DEVICE_SUBTARGET: ${{ steps.variable.outputs.DEVICE_SUBTARGET }}

    steps:
    - name: Check Server Performance
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo "CPU核心数量: $(nproc)"
        echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息:"
        echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Initialization & Deploy Independent sed
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        # 清理环境
        if [ $(docker images -q | wc -l) -gt 0 ]; then
          docker rmi $(docker images -q)
        fi
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
        sudo -E apt-get -y purge azure-cli ghc* zulu* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        
        # 安装基础依赖
        sudo -E apt-get -y update
        sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204) bison flex libelf-dev libssl-dev libdeflate-tools
        sudo -E apt-get -y install antlr3 asciidoc autopoint ecj fastjar gnutls-dev haveged \
          llvm lld mkisofs msmtp qemu-utils re2c swig uglifyjs upx-ucl wget
        sudo -E systemctl daemon-reload
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
        sudo timedatectl set-timezone "$TZ"

        # 部署独立sed（核心修复）
        echo "=== 部署独立sed ==="
        mkdir -p $(dirname $INDEPENDENT_SED)
        # 从Ubuntu仓库下载sed二进制包
        wget -q -O /tmp/sed.deb http://archive.ubuntu.com/ubuntu/pool/main/s/sed/sed_4.8-1ubuntu2_amd64.deb
        dpkg-deb -x /tmp/sed.deb /tmp/sed_extract
        sudo cp /tmp/sed_extract/usr/bin/sed $INDEPENDENT_SED
        sudo chmod +x $INDEPENDENT_SED
        # 预验证独立sed功能（简化测试逻辑）
        TEST_PRE=$(mktemp)
        echo '/usr/local/' > $TEST_PRE  # 测试内容：带结尾/，确保匹配
        $INDEPENDENT_SED -i -e 's,/usr/local/,/test/path/,,' $TEST_PRE  # 用逗号分隔，避免冲突
        if grep -q '/test/path/' $TEST_PRE; then
          echo "✅ 独立sed预验证通过"
        else
          echo "❌ 独立sed失效，尝试备用源"
          wget -q -O /tmp/sed.deb http://ftp.debian.org/debian/pool/main/s/sed/sed_4.8-1_amd64.deb
          dpkg-deb -x /tmp/sed.deb /tmp/sed_extract
          sudo cp /tmp/sed_extract/usr/bin/sed $INDEPENDENT_SED
          sudo chmod +x $INDEPENDENT_SED
          $INDEPENDENT_SED -i -e 's,/usr/local/,/test/path/,,' $TEST_PRE
          grep -q '/test/path/' $TEST_PRE || { echo "致命错误：独立sed部署失败"; exit 1; }
        fi
        rm -f $TEST_PRE /tmp/sed.deb /tmp/sed_extract

        # 创建工作目录
        mkdir -p $BASE_PATH $STAGING_BIN
        sudo chown -R runner:runner $BASE_PATH
        sudo chmod -R 777 $BASE_PATH
        echo "✅ 环境初始化完成"

    - name: Combine Disks
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 1024
        temp-reserve-mb: 100
        root-reserve-mb: 1024
        remove-dotnet: true
        remove-android: true
        remove-haskell: true

    - name: Checkout
      uses: actions/checkout@main

    - name: Clone Source Code
      id: clone
      run: |
        echo "=== 工作目录空间 ==="
        df -hT $BASE_PATH

        # 克隆源码
        git clone $REPO_URL -b $REPO_BRANCH $OPENWRT_DIR
        echo "OPENWRT_PATH=$OPENWRT_DIR" >> $GITHUB_ENV

        # 部署sed到staging目录（直接复制，不依赖链接）
        mkdir -p $STAGING_BIN
        sudo chown -R runner:runner $OPENWRT_DIR
        sudo chmod -R 777 $STAGING_BIN
        sudo cp $INDEPENDENT_SED $STAGING_BIN/sed
        echo "staging目录sed部署：$(ls -l $STAGING_BIN/sed)"

        # 提取提交信息
        cd $OPENWRT_DIR
        COMMIT_AUTHOR=$(git show -s --date=short --format="作者: %an")
        echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_ENV && echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_OUTPUT
        COMMIT_DATE=$(git show -s --date=short --format="时间: %ci")
        echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_ENV && echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_OUTPUT
        COMMIT_MESSAGE=$(git show -s --date=short --format="内容: %s")
        echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV && echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT
        COMMIT_HASH=$(git show -s --date=short --format="hash: %H")
        echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV && echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_OUTPUT

    - name: Fix Toolchain Paths
      run: |
        mkdir -p $STAGING_BIN
        sudo chmod -R 777 $STAGING_BIN

        # 确保sed是独立版本
        sudo cp $INDEPENDENT_SED $STAGING_BIN/sed
        echo "sed版本：$($STAGING_BIN/sed --version | head -n1)"

        # 链接其他工具
        CORE_TOOLS=(grep awk cp mv rm tar gzip bzip2 xz make gcc g++ patch perl python3 curl wget git)
        for tool in "${CORE_TOOLS[@]}"; do
          TOOL_PATH=$(which $tool)
          sudo ln -sf $TOOL_PATH $STAGING_BIN/$tool
        done

    - name: Generate Variables
      id: variable
      run: |
        cp $CONFIG_FILE $OPENWRT_DIR/.config
        cd $OPENWRT_DIR && make defconfig > /dev/null 2>&1
        SOURCE_REPO=$(echo $REPO_URL | awk -F '/' '{print $(NF)}')
        echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
        DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV && echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_OUTPUT
        DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV && echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_OUTPUT

    - name: Install Feeds
      run: |
        cd $OPENWRT_DIR
        ./scripts/feeds clean && ./scripts/feeds update -a -f && ./scripts/feeds install -a -f

    - name: Load Custom Config
      run: |
        cd $OPENWRT_DIR
        [ -e "$GITHUB_WORKSPACE/files" ] && mv "$GITHUB_WORKSPACE/files" $OPENWRT_DIR/files || true
        DIY_SCRIPT_PATH="$GITHUB_WORKSPACE/$DIY_SCRIPT"
        if [ -f "$DIY_SCRIPT_PATH" ]; then
          chmod +x "$DIY_SCRIPT_PATH" && "$DIY_SCRIPT_PATH"
        fi
        make defconfig

    - name: Verify sed Before Compile
      run: |
        echo "=== 编译前验证sed ==="
        mkdir -p $STAGING_BIN
        sudo cp $INDEPENDENT_SED $STAGING_BIN/sed  # 强制覆盖

        # 优化测试逻辑：简化内容+逗号分隔符
        TEST_FILE=$(mktemp)
        echo '/usr/local/' > $TEST_FILE  # 内容带结尾/，与匹配模式一致
        $STAGING_BIN/sed -i -e 's,/usr/local/,/test/path/,,' $TEST_FILE  # 用逗号分隔，避免冲突
        echo "sed处理后内容："
        cat $TEST_FILE
        if grep -q '/test/path/' $TEST_FILE; then
          echo "✅ sed功能验证通过"
        else
          echo "❌ sed验证失败"
          exit 1
        fi
        rm -f $TEST_FILE

    - name: Pre-Compile lua
      run: |
        cd $OPENWRT_DIR
        echo "=== 编译lua ==="
        export PATH=$STAGING_BIN:$PATH
        make package/utils/lua/host/compile V=s
        [ -f "build_dir/hostpkg/lua-5.1.5/src/lua" ] || { echo "❌ lua编译失败"; exit 1; }
        echo "✅ lua编译成功"

    - name: Compile Firmware
      run: |
        cd $OPENWRT_DIR
        echo "=== 开始编译固件 ==="
        make -j$(nproc) V=s || make -j1 V=s
        echo "✅ 固件编译完成"
