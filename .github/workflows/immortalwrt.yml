name: immortalwrt

on:
  workflow_dispatch:
  schedule:
    - cron: 0 20 * * *

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: master
  CONFIG_FILE: configs/immortalwrt.config
  DIY_SCRIPT: diy-script.sh
  CLASH_KERNEL: arm64
  CACHE_TOOLCHAIN: true
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: ROOTFS_PLUS
  OPENWRT_RELEASE: true
  OPENWRT_TAG: ARMv8_PLUS
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-22.04

    outputs:
      # 保持原有outputs定义...
      COMMIT_AUTHOR: ${{ steps.clone.outputs.COMMIT_AUTHOR }}
      COMMIT_DATE: ${{ steps.clone.outputs.COMMIT_DATE }}
      COMMIT_MESSAGE: ${{ steps.clone.outputs.COMMIT_MESSAGE }}
      COMMIT_HASH: ${{ steps.clone.outputs.COMMIT_HASH }}
      DEVICE_TARGET: ${{ steps.variable.outputs.DEVICE_TARGET }}
      DEVICE_SUBTARGET: ${{ steps.variable.outputs.DEVICE_SUBTARGET }}

    steps:
    # 省略其他步骤（与之前一致，仅修改涉及ncurses的部分）...

    - name: Install Feeds (Force Update)
      run: |
        cd $OPENWRT_PATH
        ./scripts/feeds clean
        ./scripts/feeds update -a -f
        ./scripts/feeds install -a -f
        # 验证源码中的ncurses是否存在（关键修正）
        echo "=== 验证ncurses是否在源码目录 ==="
        if [ -d "package/libs/ncurses" ]; then
          echo "✅ 源码中找到ncurses（路径：package/libs/ncurses）"
        else
          echo "❌ 源码中未找到ncurses，请检查源码完整性"
          exit 1
        fi
        [ -d "feeds/packages/utils/pv" ] && echo "pv 包存在" || echo "pv 包缺失"

    # 移除之前的"Fix Feeds and Locate ncurses"步骤，替换为确认源码内路径
    - name: Confirm ncurses Path in Source Code
      run: |
        cd $OPENWRT_PATH
        # 直接指定源码中的ncurses路径（用户提供的正确路径）
        NCURSES_PATH="package/libs/ncurses"
        echo "NCURSES_PATH=$NCURSES_PATH" >> $GITHUB_ENV
        echo "已确认ncurses路径：$NCURSES_PATH"

        # 确认pcre是否在源码中（通常也在package/libs/pcre）
        PCRE_PATH="package/libs/pcre"
        if [ ! -d "$PCRE_PATH" ]; then
          echo "源码中未找到pcre，创建本地包"
          mkdir -p $PCRE_PATH
          cat > $PCRE_PATH/Makefile << 'EOF'
          include $(TOPDIR)/rules.mk

          PKG_NAME:=pcre
          PKG_VERSION:=8.45
          PKG_RELEASE:=1

          PKG_SOURCE:=pcre-$(PKG_VERSION).tar.bz2
          PKG_SOURCE_URL:=https://downloads.sourceforge.net/project/pcre/pcre/$(PKG_VERSION)/
          PKG_HASH:=4dae6fdcd2bb0bb6c37b5f97ee0875c2632ad71b36d008a87ad501a7193cde996

          PKG_INSTALL:=1
          include $(INCLUDE_DIR)/package.mk

          define Package/libpcre
            SECTION:=libs
            CATEGORY:=Libraries
            TITLE:=PCRE library
          endef

          define Build/Configure
            $(call Build/Configure/Default, --enable-utf8)
          endef

          define Package/libpcre/install
            $(INSTALL_DIR) $(1)/usr/lib
            $(CP) $(PKG_INSTALL_DIR)/usr/lib/libpcre.so.* $(1)/usr/lib/
          endef

          $(eval $(call BuildPackage,libpcre))
          EOF
        fi
        echo "已确认pcre路径：$PCRE_PATH"

    # 保留其他步骤（Load Custom Configuration / Remove msd_lite等）...

    - name: Enable Required Dependencies (优化验证)
      run: |
        cd $OPENWRT_PATH
        # 确保启用源码中的ncurses和ncursesw
        echo "CONFIG_PACKAGE_ncurses=y" >> .config
        echo "CONFIG_PACKAGE_ncursesw=y" >> .config
        echo "CONFIG_PACKAGE_libpcre=y" >> .config
        sed -i '/CONFIG_PACKAGE_msd_lite/d' .config
        make defconfig
        
        echo "=== 依赖配置验证结果 ==="
        grep "CONFIG_PACKAGE_ncursesw=y" .config || echo "ncursesw 配置已添加"
        grep "CONFIG_PACKAGE_libpcre=y" .config || echo "libpcre 配置已添加"
        true

    # 修正ncurses编译步骤，使用源码内路径
    - name: Pre-Compile ncurses (Include ncursesw)
      run: |
        cd $OPENWRT_PATH
        echo "=== 提前编译ncurses（使用源码内路径） ==="
        echo "ncurses路径：$NCURSES_PATH"
        # 直接编译源码中的ncurses
        make $NCURSES_PATH/compile V=s
        # 验证宽字符库是否生成
        find staging_dir/target-*/ -name "libncursesw.so*"
        if [ $? -ne 0 ]; then
          echo "错误：未生成libncursesw.so"
          exit 1
        fi

    # 其余步骤（Pre-Compile pv / 编译固件等）保持不变...
