name: immortalwrt

on:
  workflow_dispatch:
  schedule:
    - cron: 0 20 * * *

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: master
  CONFIG_FILE: configs/immortalwrt.config
  DIY_SCRIPT: diy-script.sh
  CLASH_KERNEL: arm64
  CACHE_TOOLCHAIN: true
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: ROOTFS_PLUS
  OPENWRT_RELEASE: true
  OPENWRT_TAG: ARMv8_PLUS
  TZ: Asia/Shanghai
  BASE_PATH: "/home/runner/work/OpenWrt/OpenWrt"
  OPENWRT_DIR: "/home/runner/work/OpenWrt/OpenWrt/openwrt"
  STAGING_BIN: "/home/runner/work/OpenWrt/OpenWrt/openwrt/staging_dir/host/bin"
  INDEPENDENT_SED: "/home/runner/work/OpenWrt/OpenWrt/sed"  # 独立sed路径

jobs:
  Build:
    runs-on: ubuntu-22.04

    outputs:
      COMMIT_AUTHOR: ${{ steps.clone.outputs.COMMIT_AUTHOR }}
      COMMIT_DATE: ${{ steps.clone.outputs.COMMIT_DATE }}
      COMMIT_MESSAGE: ${{ steps.clone.outputs.COMMIT_MESSAGE }}
      COMMIT_HASH: ${{ steps.clone.outputs.COMMIT_HASH }}
      DEVICE_TARGET: ${{ steps.variable.outputs.DEVICE_TARGET }}
      DEVICE_SUBTARGET: ${{ steps.variable.outputs.DEVICE_SUBTARGET }}

    steps:
    - name: Check Server Performance
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo "CPU核心数量: $(nproc)"
        echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息:"
        echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        if [ $(docker images -q | wc -l) -gt 0 ]; then
          docker rmi $(docker images -q)
        fi
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
        sudo -E apt-get -y purge azure-cli ghc* zulu* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        sudo -E apt-get -y update
        sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204) bison flex libelf-dev libssl-dev libdeflate-tools
        sudo -E apt-get -y install antlr3 asciidoc autopoint ecj fastjar gnutls-dev haveged \
          llvm lld mkisofs msmtp qemu-utils re2c swig uglifyjs upx-ucl wget
        sudo -E systemctl daemon-reload
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
        sudo timedatectl set-timezone "$TZ"

        # 修复：部署独立sed（保留你原版的环境初始化结构，仅新增这部分）
        echo "=== 部署独立sed ==="
        mkdir -p $(dirname $INDEPENDENT_SED)
        wget -q -O /tmp/sed.deb http://archive.ubuntu.com/ubuntu/pool/main/s/sed/sed_4.8-1ubuntu2_amd64.deb
        dpkg-deb -x /tmp/sed.deb /tmp/sed_extract
        sudo cp /tmp/sed_extract/usr/bin/sed $INDEPENDENT_SED
        sudo chmod +x $INDEPENDENT_SED
        # 预验证sed（优化测试逻辑）
        TEST_PRE=$(mktemp)
        echo '/usr/local/' > $TEST_PRE
        $INDEPENDENT_SED -i -e 's,/usr/local/,/test/path/,,' $TEST_PRE
        grep -q '/test/path/' $TEST_PRE || { echo "❌ 独立sed部署失败"; exit 1; }
        rm -f $TEST_PRE /tmp/sed.deb /tmp/sed_extract

        mkdir -p $BASE_PATH
        sudo chown -R runner:runner $BASE_PATH
        sudo chmod -R 777 $BASE_PATH

    - name: Fix All System Tools Path
      run: |
        mkdir -p $STAGING_BIN
        sudo chmod 777 $STAGING_BIN

        # 修复：用独立sed替换软链接（保留你原版的工具路径步骤，仅修改sed部分）
        sudo cp $INDEPENDENT_SED $STAGING_BIN/sed
        echo "✅ sed部署: $STAGING_BIN/sed -> 独立二进制"

        # 保留你原版的其他工具链接逻辑
        CORE_TOOLS=(
          grep awk cp mv rm tar gzip bzip2 xz make gcc g++ patch 
          perl python3 curl wget git diff find sort uniq cat chmod chown
          mkdir rmdir ln echo printf date expr test
        )
        for tool in "${CORE_TOOLS[@]}"; do
          TOOL_PATH=$(which $tool 2>/dev/null)
          if [ -z "$TOOL_PATH" ]; then
            echo "⚠️ 安装 $tool"
            sudo apt-get -y install $tool
            TOOL_PATH=$(which $tool)
          fi
          sudo ln -sf $TOOL_PATH $STAGING_BIN/$tool
          echo "✅ 链接: $STAGING_BIN/$tool -> $TOOL_PATH"
        done

    - name: Combine Disks
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 1024
        temp-reserve-mb: 100
        root-reserve-mb: 1024
        remove-dotnet: true
        remove-android: true
        remove-haskell: true

    - name: Checkout
      uses: actions/checkout@main

    - name: Clone Source Code to Workspace
      id: clone
      run: |
        echo "=== 工作目录空间 ==="
        df -hT /home/runner/work/OpenWrt/OpenWrt
        git clone $REPO_URL -b $REPO_BRANCH /home/runner/work/OpenWrt/OpenWrt/openwrt
        cd /home/runner/work/OpenWrt/OpenWrt/openwrt
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV

        # 修复：重新部署sed（保留你原版的克隆后逻辑，仅新增sed部署）
        mkdir -p $STAGING_BIN
        sudo cp $INDEPENDENT_SED $STAGING_BIN/sed
        echo "✅ 克隆后sed部署完成"

        # 保留你原版的提交信息提取逻辑
        COMMIT_AUTHOR=$(git show -s --date=short --format="作者: %an")
        echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_ENV && echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_OUTPUT
        COMMIT_DATE=$(git show -s --date=short --format="时间: %ci")
        echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_ENV && echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_OUTPUT
        COMMIT_MESSAGE=$(git show -s --date=short --format="内容: %s")
        echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV && echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT
        COMMIT_HASH=$(git show -s --date=short --format="hash: %H")
        echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV && echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_OUTPUT
        echo "=== 源码目录权限 ==="
        ls -ld /home/runner/work/OpenWrt/OpenWrt/openwrt

    - name: Verify Essential Scripts Exist
      run: |
        cd $OPENWRT_DIR
        echo "=== 验证scripts/feeds ==="
        if [ ! -f "scripts/feeds" ]; then
          echo "❌ 重新克隆源码"
          rm -rf /home/runner/work/OpenWrt/OpenWrt/openwrt
          git clone $REPO_URL -b $REPO_BRANCH /home/runner/work/OpenWrt/OpenWrt/openwrt
          cd /home/runner/work/OpenWrt/OpenWrt/openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          [ ! -f "scripts/feeds" ] && echo "致命错误：scripts/feeds缺失" && exit 1
        fi
        chmod +x scripts/feeds
        echo "✅ scripts/feeds验证通过"

    - name: Verify Compile Directory
      run: |
        echo "源码路径：$OPENWRT_DIR"
        echo "=== 目录权限 ===" && ls -ld $OPENWRT_DIR
        echo "=== 剩余空间 ===" && df -hT $OPENWRT_DIR

    - name: Fix Source Code Integrity
      run: |
        cd $OPENWRT_DIR
        git submodule update --init --recursive
        git fetch --all && git reset --hard origin/$REPO_BRANCH

    - name: Generate Variables
      id: variable
      run: |
        cp $CONFIG_FILE $OPENWRT_DIR/.config
        cd $OPENWRT_DIR && make defconfig > /dev/null 2>&1
        SOURCE_REPO=$(echo $REPO_URL | awk -F '/' '{print $(NF)}')
        echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
        DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV && echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_OUTPUT
        DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV && echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_OUTPUT

    - name: Check Kernel Version Compatibility
      run: |
        cd $OPENWRT_DIR
        echo "配置文件内核版本：" && grep CONFIG_KERNEL_VERSION .config || echo "未找到内核配置"
        echo "源码支持内核版本：" && grep KERNEL_PATCHVER target/linux/${DEVICE_TARGET}/Makefile || echo "未找到源码内核定义"

    - name: Clean Toolchain Cache
      run: |
        cd $OPENWRT_DIR
        make toolchain/kernel-headers/clean
        make toolchain/clean

    - name: Cache Toolchain
      if: env.CACHE_TOOLCHAIN == 'true'
      uses: HiGarfield/cachewrtbuild@main
      with:
        ccache: false
        mixkey: ${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
        prefix: ${{ env.OPENWRT_DIR }}

    - name: Install Feeds (Force Update)
      run: |
        [ ! -d "$OPENWRT_DIR" ] && echo "错误：源码目录不存在" && exit 1
        cd $OPENWRT_DIR || { echo "无法进入源码目录"; exit 1; }
        ./scripts/feeds clean && ./scripts/feeds update -a -f && ./scripts/feeds install -a -f
        echo "=== 验证ncurses ==="
        [ -d "package/libs/ncurses" ] && echo "✅ ncurses路径正确" || { echo "❌ ncurses缺失"; exit 1; }
        [ -d "feeds/packages/utils/pv" ] || { echo "⚠️ 安装pv包"; ./scripts/feeds install -p packages pv; }

    - name: Confirm ncurses Path & Fix pcre
      run: |
        cd $OPENWRT_DIR
        NCURSES_PATH="package/libs/ncurses"
        echo "NCURSES_PATH=$NCURSES_PATH" >> $GITHUB_ENV
        echo "✅ ncurses路径：$NCURSES_PATH"
        PCRE_PATH="package/libs/pcre"
        if [ ! -d "$PCRE_PATH" ]; then
          echo "⚠️ 创建pcre包"
          mkdir -p $PCRE_PATH
          printf '%s\n' \
            'include $(TOPDIR)/rules.mk' \
            '' \
            'PKG_NAME:=pcre' \
            'PKG_VERSION:=8.45' \
            'PKG_RELEASE:=1' \
            '' \
            'PKG_SOURCE:=pcre-$(PKG_VERSION).tar.bz2' \
            'PKG_SOURCE_URL:=https://downloads.sourceforge.net/project/pcre/pcre/$(PKG_VERSION)/' \
            'PKG_HASH:=4dae6fdcd2bb0bb6c37b5f97ee0875c2632ad71b36d008a87ad501a7193cde996' \
            '' \
            'PKG_INSTALL:=1' \
            'include $(INCLUDE_DIR)/package.mk' \
            '' \
            'define Package/libpcre' \
            '  SECTION:=libs' \
            '  CATEGORY:=Libraries' \
            '  TITLE:=PCRE library' \
            'endef' \
            '' \
            'define Build/Configure' \
            '  $(call Build/Configure/Default, --enable-utf8)' \
            'endef' \
            '' \
            'define Package/libpcre/install' \
            '  $(INSTALL_DIR) $(1)/usr/lib' \
            '  $(CP) $(PKG_INSTALL_DIR)/usr/lib/libpcre.so.* $(1)/usr/lib/' \
            'endef' \
            '' \
            '$(eval $(call BuildPackage,libpcre))' \
            > "$PCRE_PATH/Makefile"
        fi
        echo "✅ pcre路径：$PCRE_PATH"

    - name: Load Custom Configuration & Clean Invalid Dependencies
      run: |
        cd $OPENWRT_DIR
        [ -e "$GITHUB_WORKSPACE/files" ] && mv "$GITHUB_WORKSPACE/files" $OPENWRT_DIR/files || echo "⚠️ 无files目录"
        DIY_SCRIPT_PATH="$GITHUB_WORKSPACE/$DIY_SCRIPT"
        if [ -f "$DIY_SCRIPT_PATH" ]; then
          chmod +x "$DIY_SCRIPT_PATH"
          echo "✅ 执行自定义脚本：$DIY_SCRIPT_PATH"
          "$DIY_SCRIPT_PATH"
        else
          echo "⚠️ 未找到$DIY_SCRIPT_PATH，跳过"
        fi
        PRESET_SCRIPTS_DIR="$GITHUB_WORKSPACE/scripts"
        if [ -d "$PRESET_SCRIPTS_DIR" ]; then
          chmod +x "$PRESET_SCRIPTS_DIR"/*.sh
          echo "✅ 执行Clash内核预设"
          "$PRESET_SCRIPTS_DIR/preset-clash-core.sh" $CLASH_KERNEL
          echo "✅ 执行终端工具预设"
          "$PRESET_SCRIPTS_DIR/preset-terminal-tools.sh"
        else
          echo "⚠️ 无scripts目录，跳过"
        fi
        rm -rf $(find package/feeds/ -name "luci-app-msd_lite" -o -name "msd_lite")
        echo "✅ 清理冲突依赖完成"

    - name: Enable Required Dependencies
      run: |
        cd $OPENWRT_DIR
        echo "CONFIG_PACKAGE_ncurses=y" >> .config
        echo "CONFIG_PACKAGE_ncursesw=y" >> .config
        echo "CONFIG_PACKAGE_libpcre=y" >> .config
        sed -i '/CONFIG_PACKAGE_msd_lite/d' .config
        make defconfig
        echo "=== 依赖配置验证 ==="
        grep "CONFIG_PACKAGE_ncursesw=y" .config && grep "CONFIG_PACKAGE_libpcre=y" .config || echo "⚠️ 依赖已添加"
        true

    - name: Final Verify sed Before Compile
      run: |
        cd $OPENWRT_DIR
        STAGING_BIN_DIR="$OPENWRT_DIR/staging_dir/host/bin"
        echo "=== 编译前验证sed ==="

        # 修复：用独立sed验证（保留你原版的验证步骤结构，仅修改sed验证逻辑）
        sudo cp $INDEPENDENT_SED $STAGING_BIN_DIR/sed
        echo "当前sed：$(ls -l $STAGING_BIN_DIR/sed)"

        # 优化测试逻辑：简化内容+逗号分隔
        TEST_FILE=$(mktemp)
        echo '/usr/local/' > $TEST_FILE
        $STAGING_BIN_DIR/sed -i -e 's,/usr/local/,/test/path/,,' $TEST_FILE
        echo "sed处理后内容："
        cat $TEST_FILE
        if grep -q '/test/path/' $TEST_FILE; then
          echo "✅ sed功能验证通过"
        else
          echo "❌ sed验证失败"
          exit 1
        fi
        rm -f $TEST_FILE

    - name: Pre-Compile ncurses (Include ncursesw)
      run: |
        cd $OPENWRT_DIR
        echo "=== 预编译ncurses：$NCURSES_PATH ==="
        make $NCURSES_PATH/compile V=s
        echo "=== 验证ncursesw ==="
        find staging_dir/target-*/ -name "libncursesw.so*"
        [ $? -eq 0 ] || { echo "❌ ncursesw编译失败"; exit 1; }
        echo "✅ ncurses预编译成功"

    - name: Pre-Compile pv
      run: |
        cd $OPENWRT_DIR
        echo "=== 预编译pv ==="
        make package/feeds/packages/pv/compile V=s
        find bin/packages/*/*/ -name "pv-*.apk"
        [ $? -eq 0 ] || { echo "❌ pv编译失败"; exit 1; }
        echo "✅ pv预编译成功"

    - name: Download Dependent Packages
      run: |
        cd $OPENWRT_DIR
        make defconfig
        make download -j8
        find dl -size -1024c -exec rm -f {} \;
        echo "✅ 依赖包下载完成"

    - name: Compile Firmware
      id: compile
      run: |
        cd $OPENWRT_DIR
        mkdir -p files/etc/uci-defaults
        cp $GITHUB_WORKSPACE/scripts/init-settings.sh files/etc/uci-defaults/99-init-settings
        echo "=== 用$(nproc)线程编译 ==="
        make -j$(nproc) V=s || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV
        echo "✅ 固件编译完成"

    - name: Check Disk Usage
      if: (!cancelled())
      run: df -hT

    - name: Upload Bin Directory
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.SOURCE_REPO }}-bin-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
        path: ${{ env.OPENWRT_DIR }}/bin

    - name: Organize Firmware Files
      if: steps.compile.outputs.status == 'success'
      run: |
        cd $OPENWRT_DIR/bin/targets/*/*
        cat sha256sums > firmware.sha256
        cp $OPENWRT_DIR/.config build.config
        mkdir -p packages && mv $OPENWRT_DIR/bin/packages/*/*/*.ipk packages/
        tar -zcf Packages.tar.gz packages/
        rm -rf packages feeds.buildinfo version.buildinfo
        echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV
        echo "✅ 固件整理完成"

    - name: Upload Firmware to Artifact
      if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE != 'true'
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.SOURCE_REPO }}-firmware-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE_PATH }}

    - name: Upload Firmware to Release
      if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE == 'true'
      uses: ncipollo/release-action@v1
      with:
        name: R${{ env.DATE }} for ${{ env.FIRMWARE_TAG }}
        allowUpdates: true
        tag: ${{ env.FIRMWARE_TAG }}
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ${{ env.FIRMWARE_PATH }}/*
        body: |
          ## 📦 ImmortalWrt 固件发布
          ### 基本信息
          - 架构：${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
          - 源码：[${{ env.REPO_URL }}](${{ env.REPO_URL }})
          - 分支：${{ env.REPO_BRANCH }}
          - 编译时间：${{ env.DATE }}
          
          ### 登录信息
          - 默认IP：192.168.1.1
          - 默认密码：password
          
          ### 源码提交记录
          - ${{ env.COMMIT_AUTHOR }}
          - ${{ env.COMMIT_DATE }}
          - ${{ env.COMMIT_MESSAGE }}
          - ${{ env.COMMIT_HASH }}

  Package:
    needs: [Build]
    runs-on: ubuntu-22.04
    env:
      COMMIT_AUTHOR: ${{ needs.Build.outputs.COMMIT_AUTHOR }}
      COMMIT_DATE: ${{ needs.Build.outputs.COMMIT_DATE }}
      COMMIT_MESSAGE: ${{ needs.Build.outputs.COMMIT_MESSAGE }}
      COMMIT_HASH: ${{ needs.Build.outputs.COMMIT_HASH }}
      DEVICE_TARGET: ${{ needs.Build.outputs.DEVICE_TARGET }}
      DEVICE_SUBTARGET: ${{ needs.Build.outputs.DEVICE_SUBTARGET }}

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization Package Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get -y update
        sudo apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
        sudo apt-get -y autoremove --purge && sudo apt-get -y clean
        sudo timedatectl set-timezone "$TZ"

    - name: Download Rootfs Firmware
      id: download
      run: |
        FIRMWARE_DIR=/mnt/openwrt/bin/targets/armvirt/64
        mkdir -p $FIRMWARE_DIR && cd $FIRMWARE_DIR
        wget -q $(curl -s "https://api.github.com/repos/$GITHUB_REPOSITORY/releases" | grep "$FIRMWARE_TAG.*rootfs.tar.gz" | awk -F '"' '{print $4}')
        echo "status=success" >> $GITHUB_OUTPUT
        echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "DATE1=$(date +"%y.%m.%d")" >> $GITHUB_ENV

    - name: Package OpenWrt for ARMvirt
      if: steps.download.outputs.status == 'success'
      uses: ophub/flippy-openwrt-actions@main
      env:
        OPENWRT_ARMVIRT: /mnt/openwrt/bin/targets/*/*/*rootfs.tar.gz
        PACKAGE_SOC: all
        WHOAMI: Haiibo
        KERNEL_VERSION_NAME: 5.15.13_6.1.5
        KERNEL_AUTO_LATEST: true
        DISTRIB_REVISION: R${{ env.DATE1 }} by Haiibo

    - name: Upload Packaged Firmware to Artifact
      if: env.PACKAGED_STATUS == 'success' && env.OPENWRT_RELEASE != 'true'
      uses: kittaakos/upload-artifact-as-is@master
      with:
        path: ${{ env.PACKAGED_OUTPUTPATH }}

    - name: Upload Packaged Firmware to Release
      if: env.PACKAGED_STATUS == 'success' && env.OPENWRT_RELEASE == 'true'
      uses: ncipollo/release-action@v1
      with:
        name: R${{ env.DATE }} for ${{ env.OPENWRT_TAG }}
        allowUpdates: true
        removeArtifacts: true
        tag: ${{ env.OPENWRT_TAG }}
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*
        body: |
          ## 📦 ARMvirt 专用固件发布
          ### 基本信息
          - 适用设备：ARMvirt 64位设备（如虚拟机、晶晨设备）
          - 固件类型：多功能版（集成Clash、终端工具等）
          - 编译时间：${{ env.DATE }}
          
          ### 安装说明
          1. 插件安装：系统 → 晶晨宝盒 → 选择型号安装
          2. 命令安装：`openwrt-install-amlogic`（U盘启动后执行）
          3. 固件更新：`openwrt-update-amlogic`（上传固件到/mnt/mmcblk2p4）
          
          ### 登录信息
          - 默认IP：192.168.1.1
          - 默认密码：password
          
          ### 源码提交记录
          - ${{ env.COMMIT_AUTHOR }}
          - ${{ env.COMMIT_DATE }}
          - ${{ env.COMMIT_MESSAGE }}
          - ${{ env.COMMIT_HASH }}
