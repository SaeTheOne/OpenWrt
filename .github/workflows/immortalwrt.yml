name: immortalwrt

on:
  workflow_dispatch:
  schedule:
    - cron: 0 20 * * *

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: master
  CONFIG_FILE: configs/immortalwrt.config
  DIY_SCRIPT: diy-script.sh
  CLASH_KERNEL: arm64
  CACHE_TOOLCHAIN: true
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: ROOTFS_PLUS
  OPENWRT_RELEASE: true
  OPENWRT_TAG: ARMv8_PLUS
  TZ: Asia/Shanghai
  BASE_PATH: "/home/runner/work/OpenWrt/OpenWrt"
  OPENWRT_DIR: "/home/runner/work/OpenWrt/OpenWrt/openwrt"
  STAGING_BIN: "/home/runner/work/OpenWrt/OpenWrt/openwrt/staging_dir/host/bin"
  SED_SYSTEM: "/usr/bin/sed"  # 明确系统sed路径

jobs:
  Build:
    runs-on: ubuntu-22.04

    outputs:
      COMMIT_AUTHOR: ${{ steps.clone.outputs.COMMIT_AUTHOR }}
      COMMIT_DATE: ${{ steps.clone.outputs.COMMIT_DATE }}
      COMMIT_MESSAGE: ${{ steps.clone.outputs.COMMIT_MESSAGE }}
      COMMIT_HASH: ${{ steps.clone.outputs.COMMIT_HASH }}
      DEVICE_TARGET: ${{ steps.variable.outputs.DEVICE_TARGET }}
      DEVICE_SUBTARGET: ${{ steps.variable.outputs.DEVICE_SUBTARGET }}

    steps:
    - name: Check Server Performance
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo "CPU核心数量: $(nproc)"
        echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息:"
        echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        # 清理环境
        if [ $(docker images -q | wc -l) -gt 0 ]; then
          docker rmi $(docker images -q)
        fi
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
        sudo -E apt-get -y purge azure-cli ghc* zulu* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        
        # 修复1：强制重新安装sed（确保二进制文件完好）
        sudo -E apt-get -y update
        sudo -E apt-get -y --reinstall install sed  # 重新安装sed，修复可能的损坏
        sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204) bison flex libelf-dev libssl-dev libdeflate-tools
        sudo -E apt-get -y install antlr3 asciidoc autopoint ecj fastjar gnutls-dev haveged \
          llvm lld mkisofs msmtp qemu-utils re2c swig uglifyjs upx-ucl
        sudo -E systemctl daemon-reload
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
        sudo timedatectl set-timezone "$TZ"

        # 验证系统sed是否正常工作
        echo "=== 验证系统sed基本功能 ==="
        TEST_SYS_FILE=$(mktemp)
        echo 'test: /usr/local/' > $TEST_SYS_FILE
        $SED_SYSTEM -i -e 's,/usr/local/,/test/,g' $TEST_SYS_FILE
        if grep -q 'test: /test/' $TEST_SYS_FILE; then
          echo "✅ 系统sed功能正常"
        else
          echo "❌ 系统sed损坏，紧急修复"
          # 若系统sed彻底损坏，手动下载sed二进制
          sudo wget -O $SED_SYSTEM https://github.com/mirror/musl/blob/master/tools/sed?raw=true
          sudo chmod +x $SED_SYSTEM
          # 再次验证
          $SED_SYSTEM --version || { echo "致命错误：sed无法修复"; exit 1; }
        fi
        rm -f $TEST_SYS_FILE

        # 创建基础目录
        mkdir -p $BASE_PATH
        sudo chown -R runner:runner $BASE_PATH
        sudo chmod -R 777 $BASE_PATH
        echo "✅ 基础工作目录创建完成：$(ls -ld $BASE_PATH)"

    - name: Combine Disks
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 1024
        temp-reserve-mb: 100
        root-reserve-mb: 1024
        remove-dotnet: true
        remove-android: true
        remove-haskell: true

    - name: Checkout
      uses: actions/checkout@main

    - name: Clone Source Code to Workspace
      id: clone
      run: |
        echo "=== 工作目录空间 ==="
        df -hT $BASE_PATH

        # 克隆源码
        git clone $REPO_URL -b $REPO_BRANCH $OPENWRT_DIR
        echo "OPENWRT_PATH=$OPENWRT_DIR" >> $GITHUB_ENV

        # 创建staging目录结构
        mkdir -p $STAGING_BIN
        if [ ! -d "$STAGING_BIN" ]; then
          echo "❌ 无法创建$STAGING_BIN目录"
          ls -ld $(dirname $STAGING_BIN)
          exit 1
        fi

        # 授权并创建sed链接
        sudo chown -R runner:runner $OPENWRT_DIR
        sudo chmod -R 777 $STAGING_BIN
        sudo ln -sf $SED_SYSTEM $STAGING_BIN/sed
        echo "克隆后sed链接：$(ls -l $STAGING_BIN/sed)"

        # 提取提交信息
        cd $OPENWRT_DIR
        COMMIT_AUTHOR=$(git show -s --date=short --format="作者: %an")
        echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_ENV && echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_OUTPUT
        COMMIT_DATE=$(git show -s --date=short --format="时间: %ci")
        echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_ENV && echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_OUTPUT
        COMMIT_MESSAGE=$(git show -s --date=short --format="内容: %s")
        echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV && echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT
        COMMIT_HASH=$(git show -s --date=short --format="hash: %H")
        echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV && echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_OUTPUT

    - name: Fix All System Tools Path
      run: |
        mkdir -p $STAGING_BIN
        sudo chmod -R 777 $STAGING_BIN

        # 重建sed链接（使用绝对路径）
        sudo rm -f $STAGING_BIN/sed
        sudo ln -s $SED_SYSTEM $STAGING_BIN/sed
        echo "sed链接: $(ls -l $STAGING_BIN/sed)"
        $STAGING_BIN/sed --version || { echo "❌ sed链接失败"; exit 1; }

        # 其他工具
        CORE_TOOLS=(grep awk cp mv rm tar gzip bzip2 xz make gcc g++ patch perl python3 curl wget git)
        for tool in "${CORE_TOOLS[@]}"; do
          TOOL_PATH=$(which $tool)
          sudo ln -sf $TOOL_PATH $STAGING_BIN/$tool
          echo "$tool链接: $(ls -l $STAGING_BIN/$tool)"
        done

    # 中间步骤省略（保持不变）...

    - name: Force Verify sed Before lua Compile
      run: |
        echo "=== 编译lua前最后验证sed ==="
        mkdir -p $STAGING_BIN
        sudo chmod -R 777 $STAGING_BIN

        # 1. 验证系统sed直接执行（绕开链接）
        echo "=== 验证系统sed直接执行 ==="
        TEST_SYS=$(mktemp)
        echo '"/usr/local/test"' > $TEST_SYS
        $SED_SYSTEM -i -e 's,"/usr/local/","/test/path/",' $TEST_SYS
        echo "系统sed处理后内容:"
        cat $TEST_SYS
        if ! grep -q '"/test/path/test"' $TEST_SYS; then
          echo "❌ 系统sed直接执行失败，重新安装sed"
          sudo apt-get -y --reinstall install sed
          $SED_SYSTEM -i -e 's,"/usr/local/","/test/path/",' $TEST_SYS
          grep -q '"/test/path/test"' $TEST_SYS || { echo "致命错误：系统sed彻底失效"; exit 1; }
        fi

        # 2. 验证链接的sed执行
        echo "=== 验证链接的sed执行 ==="
        sudo ln -sf $SED_SYSTEM $STAGING_BIN/sed  # 强制重建链接
        echo "当前sed链接: $(ls -l $STAGING_BIN/sed)"
        TEST_LINK=$(mktemp)
        echo '"/usr/local/test"' > $TEST_LINK
        $STAGING_BIN/sed -i -e 's,"/usr/local/","/test/path/",' $TEST_LINK
        echo "链接sed处理后内容:"
        cat $TEST_LINK
        if grep -q '"/test/path/test"' $TEST_LINK; then
          echo "✅ 最终sed功能验证通过"
        else
          echo "❌ 链接sed执行失败，使用备用方案"
          # 备用方案：直接复制系统sed到staging目录（不依赖链接）
          sudo cp $SED_SYSTEM $STAGING_BIN/sed
          sudo chmod +x $STAGING_BIN/sed
          # 再次验证备用方案
          $STAGING_BIN/sed -i -e 's,"/usr/local/","/test/path/",' $TEST_LINK
          grep -q '"/test/path/test"' $TEST_LINK || { echo "致命错误：备用方案也失败"; exit 1; }
          echo "✅ 备用方案（复制sed二进制）验证通过"
        fi

        rm -f $TEST_SYS $TEST_LINK

    - name: Pre-Compile lua
      run: |
        cd $OPENWRT_DIR
        echo "=== 优先编译lua ==="
        make package/utils/lua/host/compile V=s
        if [ ! -f "build_dir/hostpkg/lua-5.1.5/src/lua" ]; then
          echo "❌ lua编译失败"
          exit 1
        fi
        echo "✅ lua预编译成功"

    # 剩余步骤保持不变...
