name: immortalwrt

on:
  workflow_dispatch:
  schedule:
    - cron: 0 20 * * *

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: master
  CONFIG_FILE: configs/immortalwrt.config
  DIY_SCRIPT: diy-script.sh
  CLASH_KERNEL: arm64
  CACHE_TOOLCHAIN: true
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: ROOTFS_PLUS
  OPENWRT_RELEASE: true
  OPENWRT_TAG: ARMv8_PLUS
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-22.04

    outputs:
      COMMIT_AUTHOR: ${{ steps.clone.outputs.COMMIT_AUTHOR }}
      COMMIT_DATE: ${{ steps.clone.outputs.COMMIT_DATE }}
      COMMIT_MESSAGE: ${{ steps.clone.outputs.COMMIT_MESSAGE }}
      COMMIT_HASH: ${{ steps.clone.outputs.COMMIT_HASH }}
      DEVICE_TARGET: ${{ steps.variable.outputs.DEVICE_TARGET }}
      DEVICE_SUBTARGET: ${{ steps.variable.outputs.DEVICE_SUBTARGET }}

    steps:
    - name: Check Server Performance
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo "CPU核心数量: $(nproc)"
        echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息:"
        echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q)
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
        sudo -E apt-get -y purge azure-cli ghc* zulu* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        sudo -E apt-get -y update
        sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204) bison flex libelf-dev libssl-dev
        sudo -E systemctl daemon-reload
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
        sudo timedatectl set-timezone "$TZ"
        sudo -E apt-get -y update
        sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
        sudo -E apt-get -y install antlr3 asciidoc autopoint ecj fastjar gnutls-dev haveged \
          llvm lld mkisofs msmtp qemu-utils re2c swig uglifyjs upx-ucl
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean

    - name: Combine Disks
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 1024
        temp-reserve-mb: 100
        root-reserve-mb: 1024
        remove-dotnet: true
        remove-android: true
        remove-haskell: true

    - name: Checkout
      uses: actions/checkout@main

    - name: Clone Source Code to Workspace
      id: clone
      run: |
        echo "=== 当前工作目录空间情况 ==="
        df -hT /home/runner/work/OpenWrt/OpenWrt
        # 克隆源码（确保完整）
        git clone $REPO_URL -b $REPO_BRANCH /home/runner/work/OpenWrt/OpenWrt/openwrt
        cd /home/runner/work/OpenWrt/OpenWrt/openwrt
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
        # 提取源码信息
        COMMIT_AUTHOR=$(git show -s --date=short --format="作者: %an")
        echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_ENV
        echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_OUTPUT
        COMMIT_DATE=$(git show -s --date=short --format="时间: %ci")
        echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_ENV
        echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_OUTPUT
        COMMIT_MESSAGE=$(git show -s --date=short --format="内容: %s")
        echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
        echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT
        COMMIT_HASH=$(git show -s --date=short --format="hash: %H")
        echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV
        echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_OUTPUT
        echo "=== 源码目录权限验证 ==="
        ls -ld /home/runner/work/OpenWrt/OpenWrt/openwrt

    - name: Verify Essential Scripts Exist (修复 scripts/feeds 缺失)
      run: |
        cd $OPENWRT_PATH
        echo "=== 验证核心脚本是否存在 ==="
        # 检查 scripts/feeds，缺失则重新克隆
        if [ ! -f "scripts/feeds" ]; then
          echo "❌ scripts/feeds 不存在，重新克隆源码"
          rm -rf /home/runner/work/OpenWrt/OpenWrt/openwrt
          git clone $REPO_URL -b $REPO_BRANCH /home/runner/work/OpenWrt/OpenWrt/openwrt
          cd /home/runner/work/OpenWrt/OpenWrt/openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          # 再次检查，仍缺失则报错
          if [ ! -f "scripts/feeds" ]; then
            echo "致命错误：重新克隆后仍缺失 scripts/feeds，源码可能损坏"
            exit 1
          fi
        fi
        echo "✅ scripts/feeds 存在且可执行"
        # 赋予执行权限
        chmod +x scripts/feeds

    - name: Verify Compile Directory
      run: |
        echo "OpenWrt 源码路径：$OPENWRT_PATH"
        echo "=== 工作目录下源码目录权限 ==="
        ls -ld $OPENWRT_PATH
        echo "=== 工作目录空间情况 ==="
        df -hT $OPENWRT_PATH

    - name: Fix Source Code Integrity
      run: |
        cd $OPENWRT_PATH
        git submodule update --init --recursive
        git fetch --all
        git reset --hard origin/$REPO_BRANCH

    - name: Generate Variables
      id: variable
      run: |
        cp $CONFIG_FILE $OPENWRT_PATH/.config
        cd $OPENWRT_PATH
        make defconfig > /dev/null 2>&1
        SOURCE_REPO="$(echo $REPO_URL | awk -F '/' '{print $(NF)}')"
        echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
        DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_OUTPUT
        DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_OUTPUT

    - name: Check Kernel Version Compatibility
      run: |
        cd $OPENWRT_PATH
        echo "配置文件中的内核版本："
        grep CONFIG_KERNEL_VERSION .config || echo "未找到CONFIG_KERNEL_VERSION配置"
        echo "源码支持的内核版本："
        grep KERNEL_PATCHVER target/linux/${DEVICE_TARGET}/Makefile || echo "未找到源码内核版本定义"

    - name: Cache Toolchain
      if: env.CACHE_TOOLCHAIN == 'true'
      uses: HiGarfield/cachewrtbuild@main
      with:
        ccache: false
        mixkey: ${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
        prefix: ${{ env.OPENWRT_PATH }}

    - name: Clean Toolchain Cache
      run: |
        cd $OPENWRT_PATH
        make toolchain/kernel-headers/clean
        make toolchain/clean

    - name: Install Feeds (Force Update)
      run: |
        # 确认路径存在，避免 cd 失败
        if [ ! -d "$OPENWRT_PATH" ]; then
          echo "错误：OPENWRT_PATH 不存在 - $OPENWRT_PATH"
          exit 1
        fi
        cd $OPENWRT_PATH || { echo "无法进入 $OPENWRT_PATH"; exit 1; }
        # 执行 feeds 操作
        ./scripts/feeds clean
        ./scripts/feeds update -a -f
        ./scripts/feeds install -a -f
        # 验证源码内 ncurses 和 pv 包
        echo "=== 验证关键包是否存在 ==="
        if [ -d "package/libs/ncurses" ]; then
          echo "✅ 源码中找到 ncurses（路径：package/libs/ncurses）"
        else
          echo "❌ 源码中未找到 ncurses，请检查源码完整性"
          exit 1
        fi
        if [ -d "feeds/packages/utils/pv" ]; then
          echo "✅ pv 包存在（路径：feeds/packages/utils/pv）"
        else
          echo "❌ pv 包缺失，尝试手动安装"
          ./scripts/feeds install -p packages pv
        fi

    - name: Confirm ncurses Path in Source Code
      run: |
        cd $OPENWRT_PATH
        # 直接指定源码内 ncurses 路径（用户确认的正确路径）
        NCURSES_PATH="package/libs/ncurses"
        echo "NCURSES_PATH=$NCURSES_PATH" >> $GITHUB_ENV
        echo "已确认 ncurses 路径：$NCURSES_PATH"
        # 确认 pcre（通常在源码 package/libs/pcre）
        PCRE_PATH="package/libs/pcre"
        if [ ! -d "$PCRE_PATH" ]; then
          echo "⚠️  源码中未找到 pcre，创建本地包"
          mkdir -p $PCRE_PATH
          cat > $PCRE_PATH/Makefile << 'EOF'
          include $(TOPDIR)/rules.mk

          PKG_NAME:=pcre
          PKG_VERSION:=8.45
          PKG_RELEASE:=1

          PKG_SOURCE:=pcre-$(PKG_VERSION).tar.bz2
          PKG_SOURCE_URL:=https://downloads.sourceforge.net/project/pcre/pcre/$(PKG_VERSION)/
          PKG_HASH:=4dae6fdcd2bb0bb6c37b5f97ee0875c2632ad71b36d008a87ad501a7193cde996

          PKG_INSTALL:=1
          include $(INCLUDE_DIR)/package.mk

          define Package/libpcre
            SECTION:=libs
            CATEGORY:=Libraries
            TITLE:=PCRE library
          endef

          define Build/Configure
            $(call Build/Configure/Default, --enable-utf8)
          endef

          define Package/libpcre/install
            $(INSTALL_DIR) $(1)/usr/lib
            $(CP) $(PKG_INSTALL_DIR)/usr/lib/libpcre.so.* $(1)/usr/lib/
          endef

          $(eval $(call BuildPackage,libpcre))
          EOF
        fi
        echo "已确认 pcre 路径：$PCRE_PATH"

    - name: Load Custom Configuration
      run: |
        [ -e files ] && mv files $OPENWRT_PATH/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRT_PATH/.config
        chmod +x $GITHUB_WORKSPACE/scripts/*.sh
        chmod +x $DIY_SCRIPT
        cd $OPENWRT_PATH
        $GITHUB_WORKSPACE/$DIY_SCRIPT
        $GITHUB_WORKSPACE/scripts/preset-clash-core.sh $CLASH_KERNEL
        $GITHUB_WORKSPACE/scripts/preset-terminal-tools.sh

    - name: Remove luci-app-msd_lite and msd_lite (彻底删除)
      run: |
        cd $OPENWRT_PATH
        # 全局删除相关插件，消除依赖警告
        rm -rf $(find package/feeds/luci -name "luci-app-msd_lite")
        rm -rf $(find package/feeds/packages -name "msd_lite")
        rm -rf $(find package -name "luci-app-msd_lite")
        rm -rf $(find package -name "msd_lite")
        echo "✅ 已强制删除所有 luci-app-msd_lite 和 msd_lite 相关文件"

    - name: Enable Required Dependencies (优化验证)
      run: |
        cd $OPENWRT_PATH
        # 确保启用 ncurses、ncursesw 和 libpcre
        echo "CONFIG_PACKAGE_ncurses=y" >> .config
        echo "CONFIG_PACKAGE_ncursesw=y" >> .config
        echo "CONFIG_PACKAGE_libpcre=y" >> .config
        # 移除无效的 msd_lite 配置
        sed -i '/CONFIG_PACKAGE_msd_lite/d' .config
        make defconfig
        
        # 优化验证，避免 grep 报错退出
        echo "=== 依赖配置验证结果 ==="
        grep "CONFIG_PACKAGE_ncursesw=y" .config || echo "⚠️ ncursesw 配置已添加"
        grep "CONFIG_PACKAGE_libpcre=y" .config || echo "⚠️ libpcre 配置已添加"
        # 强制返回成功状态
        true

    - name: Pre-Compile ncurses (Include ncursesw)
      run: |
        cd $OPENWRT_PATH
        echo "=== 提前编译 ncurses（使用源码内路径） ==="
        echo "ncurses 编译路径：$NCURSES_PATH"
        # 编译源码中的 ncurses
        make $NCURSES_PATH/compile V=s
        # 验证宽字符库生成
        echo "=== 查找 libncursesw.so 结果 ==="
        find staging_dir/target-*/ -name "libncursesw.so*"
        if [ $? -ne 0 ]; then
          echo "❌ 错误：未生成 libncursesw.so"
          exit 1
        fi
        echo "✅ ncurses 编译成功，已生成 libncursesw.so"

    - name: Pre-Compile pv (Test Separately)
      run: |
        cd $OPENWRT_PATH
        echo "=== 提前编译 pv 包 ==="
        # 编译 pv（依赖 ncursesw）
        make package/feeds/packages/pv/compile V=s
        # 验证 pv 编译结果
        echo "=== 查找 pv 编译产物 ==="
        find bin/packages/aarch64_generic/packages/ -name "pv-*.apk"
        if [ $? -ne 0 ]; then
          echo "❌ 错误：pv 编译失败"
          exit 1
        fi
        echo "✅ pv 提前编译成功"

    - name: Download DL Package
      run: |
        cd $OPENWRT_PATH
        make defconfig
        make download -j8
        # 删除空文件（避免下载失败导致编译异常）
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile Firmware
      id: compile
      run: |
        cd $OPENWRT_PATH
        # 复制初始化脚本
        mkdir -p files/etc/uci-defaults
        cp $GITHUB_WORKSPACE/scripts/init-settings.sh files/etc/uci-defaults/99-init-settings
        # 多线程编译，失败则单线程重试
        echo -e "$(nproc) thread compile"
        make -j$(nproc) V=s || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV

    - name: Check Space Usage
      if: (!cancelled())
      run: df -hT

    - name: Upload Bin Directory
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.SOURCE_REPO }}-bin-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
        path: ${{ env.OPENWRT_PATH }}/bin

    - name: Organize Files
      if: steps.compile.outputs.status == 'success'
      run: |
        cd $OPENWRT_PATH/bin/targets/*/*
        cat sha256sums
        cp $OPENWRT_PATH/.config build.config
        # 整理 ipk 包
        mv -f $OPENWRT_PATH/bin/packages/*/*/*.ipk packages
        tar -zcf Packages.tar.gz packages
        rm -rf packages feeds.buildinfo version.buildinfo
        echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV

    - name: Upload Firmware To Artifact
      if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE != 'true'
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.SOURCE_REPO }}-firmware-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE_PATH }}

    - name: Upload Firmware To Release
      if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE == 'true'
      uses: ncipollo/release-action@v1
      with:
        name: R${{ env.DATE }} for ${{ env.FIRMWARE_TAG }}
        allowUpdates: true
        tag: ${{ env.FIRMWARE_TAG }}
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ${{ env.FIRMWARE_PATH }}/*
        body: |
          **This is Temporary Firmware for Armvirt 64**
          ### 📒 固件信息
          - 🚀 成品固件点击此处跳转➦[PLUS](https://github.com/haiibo/OpenWrt/releases/tag/ARMv8_PLUS)即可下载
          - 💻 平台架构: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }} (多功能临时固件)
          - ⚽ 固件源码: ${{ env.REPO_URL }}
          - 💝 源码分支: ${{ env.REPO_BRANCH }}
          - 🌐 默认地址: 192.168.1.1
          - 🔑 默认密码: password
          ### 🧊 固件版本
          - 固件编译前最后一次➦[主源码](${{ env.REPO_URL }})更新记录
          - ${{ env.COMMIT_AUTHOR }}
          - ${{ env.COMMIT_DATE }}
          - ${{ env.COMMIT_MESSAGE }}
          - ${{ env.COMMIT_HASH }}

  Package:
    needs: [Build]
    runs-on: ubuntu-22.04

    env:
      COMMIT_AUTHOR: ${{ needs.Build.outputs.COMMIT_AUTHOR }}
      COMMIT_DATE: ${{ needs.Build.outputs.COMMIT_DATE }}
      COMMIT_MESSAGE: ${{ needs.Build.outputs.COMMIT_MESSAGE }}
      COMMIT_HASH: ${{ needs.Build.outputs.COMMIT_HASH }}
      DEVICE_TARGET: ${{ needs.Build.outputs.DEVICE_TARGET }}
      DEVICE_SUBTARGET: ${{ needs.Build.outputs.DEVICE_SUBTARGET }}

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q)
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
        sudo -E apt-get -y update
        sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
        sudo timedatectl set-timezone "$TZ"

    - name: Download Armvirt Firmware
      id: download
      run: |
        FIRMWARE_PATH=/mnt/openwrt/bin/targets/armvirt/64
        [ -d $FIRMWARE_PATH ] || mkdir -p $FIRMWARE_PATH
        cd $FIRMWARE_PATH
        # 下载 rootfs 固件
        wget -q $(curl -s "https://api.github.com/repos/$GITHUB_REPOSITORY/releases" | grep "$FIRMWARE_TAG.*rootfs.tar.gz" | awk -F '"' '{print $4}')
        echo "status=success" >> $GITHUB_OUTPUT
        echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "DATE1=$(date +"%y.%m.%d")" >> $GITHUB_ENV

    - name: Package OpenWrt Firmware
      if: steps.download.outputs.status == 'success'
      uses: ophub/flippy-openwrt-actions@main
      env:
        OPENWRT_ARMVIRT: openwrt/bin/targets/*/*/*rootfs.tar.gz
        PACKAGE_SOC: all
        WHOAMI: Haiibo
        KERNEL_VERSION_NAME: 5.15.13_6.1.5
        KERNEL_AUTO_LATEST: true
        DISTRIB_REVISION: R${{ env.DATE1 }} by Haiibo

    - name: Upload OpenWrt To Artifact
      if: env.PACKAGED_STATUS == 'success' && env.OPENWRT_RELEASE != 'true'
      uses: kittaakos/upload-artifact-as-is@master
      with:
        path: ${{ env.PACKAGED_OUTPUTPATH }}

    - name: Upload OpenWrt To Release
      if: env.PACKAGED_STATUS == 'success' && env.OPENWRT_RELEASE == 'true'
      uses: ncipollo/release-action@v1
      with:
        name: R${{ env.DATE }} for ${{ env.OPENWRT_TAG }}
        allowUpdates: true
        removeArtifacts: true
        tag: ${{ env.OPENWRT_TAG }}
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*
        body: |
          **This is OpenWrt Firmware for Armvirt 64**
          ### 📒 固件信息
          - 🚀 ARMv8 多功能版，集成插件多适合折腾
          - 💻 平台架构: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
          - ⚽ 固件源码: ${{ env.REPO_URL }}
          - 💝 源码分支: ${{ env.REPO_BRANCH }}
          - 🌐 默认地址: 192.168.1.1
          - 🔑 默认密码: password
          ### 🍻 安装与更新
          - 用插件安装: 系统 → 晶晨宝盒 → 安装 OpenWrt → 选择型号 → 安装
          - 用命令安装: U盘启动成功后输入命令 `openwrt-install-amlogic` 按照英文提示写入到 emmc
          - 用插件更新: 系统 → 晶晨宝盒 → 在线下载更新 → 完整更新全系统
          - 用命令更新: 上传固件到 `/mnt/mmcblk2p4` 目录，输入命令 `openwrt-update-amlogic` 即可更新
          - 注意: 如非 `amlogic` 平台，请将其更改为对应平台 `rockchip` `allwinner`
          - 部分常见问题及注意事项请参考恩山论坛F大➦[最新帖](https://www.right.com.cn/forum/thread-4076037-1-1.html)
          ### 🧊 固件版本
          - 固件编译前最后一次➦[主源码](${{ env.REPO_URL }})更新记录
          - ${{ env.COMMIT_AUTHOR }}
          - ${{ env.COMMIT_DATE }}
          - ${{ env.COMMIT_MESSAGE }}
          - ${{ env.COMMIT_HASH }}
