name: immortalwrt

on:
  workflow_dispatch:
  schedule:
    - cron: 0 20 * * *

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: master
  CONFIG_FILE: configs/immortalwrt.config
  DIY_SCRIPT: diy-script.sh
  CLASH_KERNEL: arm64
  CACHE_TOOLCHAIN: true
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: ROOTFS_PLUS
  OPENWRT_RELEASE: true
  OPENWRT_TAG: ARMv8_PLUS
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-22.04

    outputs:
      COMMIT_AUTHOR: ${{ steps.clone.outputs.COMMIT_AUTHOR }}
      COMMIT_DATE: ${{ steps.clone.outputs.COMMIT_DATE }}
      COMMIT_MESSAGE: ${{ steps.clone.outputs.COMMIT_MESSAGE }}
      COMMIT_HASH: ${{ steps.clone.outputs.COMMIT_HASH }}
      DEVICE_TARGET: ${{ steps.variable.outputs.DEVICE_TARGET }}
      DEVICE_SUBTARGET: ${{ steps.variable.outputs.DEVICE_SUBTARGET }}

    steps:
    - name: Check Server Performance
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo "CPU核心数量: $(nproc)"
        echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息:"
        echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        # 仅在有Docker镜像时执行删除
        if [ $(docker images -q | wc -l) -gt 0 ]; then
          docker rmi $(docker images -q)
        fi
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
        sudo -E apt-get -y purge azure-cli ghc* zulu* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        sudo -E apt-get -y update
        # 安装依赖包
        sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204) bison flex libelf-dev libssl-dev libdeflate-tools
        sudo -E apt-get -y install antlr3 asciidoc autopoint ecj fastjar gnutls-dev haveged \
          llvm lld mkisofs msmtp qemu-utils re2c swig uglifyjs upx-ucl
        sudo -E systemctl daemon-reload
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
        sudo timedatectl set-timezone "$TZ"

    - name: Combine Disks
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 1024
        temp-reserve-mb: 100
        root-reserve-mb: 1024
        remove-dotnet: true
        remove-android: true
        remove-haskell: true

    - name: Checkout
      uses: actions/checkout@main

    - name: Clone Source Code to Workspace
      id: clone
      run: |
        echo "=== 当前工作目录空间情况 ==="
        df -hT /home/runner/work/OpenWrt/OpenWrt
        # 克隆源码
        git clone $REPO_URL -b $REPO_BRANCH /home/runner/work/OpenWrt/OpenWrt/openwrt
        cd /home/runner/work/OpenWrt/OpenWrt/openwrt
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
        # 提取源码信息
        COMMIT_AUTHOR=$(git show -s --date=short --format="作者: %an")
        echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_ENV
        echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_OUTPUT
        COMMIT_DATE=$(git show -s --date=short --format="时间: %ci")
        echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_ENV
        echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_OUTPUT
        COMMIT_MESSAGE=$(git show -s --date=short --format="内容: %s")
        echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
        echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT
        COMMIT_HASH=$(git show -s --date=short --format="hash: %H")
        echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV
        echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_OUTPUT
        echo "=== 源码目录权限验证 ==="
        ls -ld /home/runner/work/OpenWrt/OpenWrt/openwrt

    - name: Verify Essential Scripts Exist (修复 scripts/feeds 缺失)
      run: |
        cd $OPENWRT_PATH
        echo "=== 验证核心脚本是否存在 ==="
        # 检查 scripts/feeds，缺失则重新克隆
        if [ ! -f "scripts/feeds" ]; then
          echo "❌ scripts/feeds 不存在，重新克隆源码"
          rm -rf /home/runner/work/OpenWrt/OpenWrt/openwrt
          git clone $REPO_URL -b $REPO_BRANCH /home/runner/work/OpenWrt/OpenWrt/openwrt
          cd /home/runner/work/OpenWrt/OpenWrt/openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          # 再次检查，仍缺失则报错
          if [ ! -f "scripts/feeds" ]; then
            echo "致命错误：重新克隆后仍缺失 scripts/feeds，源码可能损坏"
            exit 1
          fi
        fi
        echo "✅ scripts/feeds 存在且可执行"
        # 赋予执行权限
        chmod +x scripts/feeds

    - name: Verify Compile Directory
      run: |
        echo "OpenWrt 源码路径：$OPENWRT_PATH"
        echo "=== 工作目录下源码目录权限 ==="
        ls -ld $OPENWRT_PATH
        echo "=== 工作目录空间情况 ==="
        df -hT $OPENWRT_PATH

    - name: Fix Source Code Integrity
      run: |
        cd $OPENWRT_PATH
        git submodule update --init --recursive
        git fetch --all
        git reset --hard origin/$REPO_BRANCH

    - name: Generate Variables
      id: variable
      run: |
        cp $CONFIG_FILE $OPENWRT_PATH/.config
        cd $OPENWRT_PATH
        make defconfig > /dev/null 2>&1
        SOURCE_REPO="$(echo $REPO_URL | awk -F '/' '{print $(NF)}')"
        echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
        DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_OUTPUT
        DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_OUTPUT

    - name: Check Kernel Version Compatibility
      run: |
        cd $OPENWRT_PATH
        echo "配置文件中的内核版本："
        grep CONFIG_KERNEL_VERSION .config || echo "未找到CONFIG_KERNEL_VERSION配置"
        echo "源码支持的内核版本："
        grep KERNEL_PATCHVER target/linux/${DEVICE_TARGET}/Makefile || echo "未找到源码内核版本定义"

    - name: Clean Toolchain Cache
      run: |
        cd $OPENWRT_PATH
        make toolchain/kernel-headers/clean
        make toolchain/clean

    - name: Cache Toolchain
      if: env.CACHE_TOOLCHAIN == 'true'
      uses: HiGarfield/cachewrtbuild@main
      with:
        ccache: false
        mixkey: ${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
        prefix: ${{ env.OPENWRT_PATH }}

    - name: Install Feeds (Force Update)
      run: |
        # 确认路径存在，避免 cd 失败
        if [ ! -d "$OPENWRT_PATH" ]; then
          echo "错误：OPENWRT_PATH 不存在 - $OPENWRT_PATH"
          exit 1
        fi
        cd $OPENWRT_PATH || { echo "无法进入 $OPENWRT_PATH"; exit 1; }
        # 执行 feeds 操作
        ./scripts/feeds clean
        ./scripts/feeds update -a -f
        ./scripts/feeds install -a -f
        # 验证源码内 ncurses 和 pv 包
        echo "=== 验证关键包是否存在 ==="
        if [ -d "package/libs/ncurses" ]; then
          echo "✅ 源码中找到 ncurses（路径：package/libs/ncurses）"
        else
          echo "❌ 源码中未找到 ncurses，请检查源码完整性"
          exit 1
        fi
        if [ -d "feeds/packages/utils/pv" ]; then
          echo "✅ pv 包存在（路径：feeds/packages/utils/pv）"
        else
          echo "❌ pv 包缺失，尝试手动安装"
          ./scripts/feeds install -p packages pv
        fi

    - name: Confirm ncurses Path in Source Code
      run: |
        cd $OPENWRT_PATH
        # 验证 ncurses 路径存在性
        NCURSES_PATH="package/libs/ncurses"
        if [ -d "$NCURSES_PATH" ]; then
          echo "✅ ncurses 路径验证通过：$NCURSES_PATH"
        else
          echo "❌ ncurses 路径不存在：$NCURSES_PATH"
          exit 1
        fi
