name: immortalwrt

on:
  workflow_dispatch:
  schedule:
    - cron: 0 20 * * *

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: master
  CONFIG_FILE: configs/immortalwrt.config
  DIY_SCRIPT: diy-script.sh
  CLASH_KERNEL: arm64
  CACHE_TOOLCHAIN: true
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: ROOTFS_PLUS
  OPENWRT_RELEASE: true
  OPENWRT_TAG: ARMv8_PLUS
  TZ: Asia/Shanghai
  # 新增：定义staging目录变量，避免路径硬编码错误
  STAGING_BIN: "/home/runner/work/OpenWrt/OpenWrt/openwrt/staging_dir/host/bin"

jobs:
  Build:
    runs-on: ubuntu-22.04

    outputs:
      COMMIT_AUTHOR: ${{ steps.clone.outputs.COMMIT_AUTHOR }}
      COMMIT_DATE: ${{ steps.clone.outputs.COMMIT_DATE }}
      COMMIT_MESSAGE: ${{ steps.clone.outputs.COMMIT_MESSAGE }}
      COMMIT_HASH: ${{ steps.clone.outputs.COMMIT_HASH }}
      DEVICE_TARGET: ${{ steps.variable.outputs.DEVICE_TARGET }}
      DEVICE_SUBTARGET: ${{ steps.variable.outputs.DEVICE_SUBTARGET }}

    steps:
    - name: Check Server Performance
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo "CPU核心数量: $(nproc)"
        echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息:"
        echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        if [ $(docker images -q | wc -l) -gt 0 ]; then
          docker rmi $(docker images -q)
        fi
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
        sudo -E apt-get -y purge azure-cli ghc* zulu* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        sudo -E apt-get -y update
        # 强制安装sed（确保系统自带sed可用）
        sudo -E apt-get -y install sed $(curl -fsSL is.gd/depends_ubuntu_2204) bison flex libelf-dev libssl-dev libdeflate-tools
        sudo -E apt-get -y install antlr3 asciidoc autopoint ecj fastjar gnutls-dev haveged \
          llvm lld mkisofs msmtp qemu-utils re2c swig uglifyjs upx-ucl
        sudo -E systemctl daemon-reload
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
        sudo timedatectl set-timezone "$TZ"
        # 提前创建staging目录并锁定权限
        mkdir -p $STAGING_BIN
        sudo chmod 777 $STAGING_BIN
        sudo chattr +i $STAGING_BIN  # 防止目录被删除（关键！）

    - name: Fix All System Tools Path (确保sed优先且不被覆盖)
      run: |
        # 1. 强制创建sed软链接（直接使用系统sed路径）
        SED_SYSTEM=$(which sed)
        echo "系统sed路径: $SED_SYSTEM"
        sudo ln -sf $SED_SYSTEM $STAGING_BIN/sed
        echo "创建sed软链接: $STAGING_BIN/sed -> $SED_SYSTEM"
        # 验证链接
        ls -l $STAGING_BIN/sed
        $STAGING_BIN/sed --version || { echo "sed链接失败"; exit 1; }

        # 2. 处理libdeflate-gzip
        LIB_PATH=$(which libdeflate-gzip || which gzip)
        sudo ln -sf $LIB_PATH $STAGING_BIN/libdeflate-gzip
        echo "创建libdeflate-gzip链接: $STAGING_BIN/libdeflate-gzip -> $LIB_PATH"

        # 3. 其他工具
        CORE_TOOLS=(grep awk cp mv rm tar gzip bzip2 xz make gcc g++ patch perl python3 curl wget git)
        for tool in "${CORE_TOOLS[@]}"; do
          TOOL_PATH=$(which $tool)
          sudo ln -sf $TOOL_PATH $STAGING_BIN/$tool
          echo "创建$tool链接: $STAGING_BIN/$tool -> $TOOL_PATH"
        done

    - name: Combine Disks
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 1024
        temp-reserve-mb: 100
        root-reserve-mb: 1024
        remove-dotnet: true
        remove-android: true
        remove-haskell: true

    - name: Checkout
      uses: actions/checkout@main

    - name: Clone Source Code to Workspace
      id: clone
      run: |
        echo "=== 工作目录空间 ==="
        df -hT /home/runner/work/OpenWrt/OpenWrt
        git clone $REPO_URL -b $REPO_BRANCH /home/runner/work/OpenWrt/OpenWrt/openwrt
        cd /home/runner/work/OpenWrt/OpenWrt/openwrt
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
        # 重新确认staging目录权限（克隆后可能变化）
        sudo chmod 777 $STAGING_BIN
        # 重新创建sed链接（防止克隆操作覆盖）
        SED_SYSTEM=$(which sed)
        sudo ln -sf $SED_SYSTEM $STAGING_BIN/sed
        echo "克隆后重建sed链接: $STAGING_BIN/sed -> $SED_SYSTEM"
        # 提取提交信息
        COMMIT_AUTHOR=$(git show -s --date=short --format="作者: %an")
        echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_ENV && echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_OUTPUT
        COMMIT_DATE=$(git show -s --date=short --format="时间: %ci")
        echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_ENV && echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_OUTPUT
        COMMIT_MESSAGE=$(git show -s --date=short --format="内容: %s")
        echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV && echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT
        COMMIT_HASH=$(git show -s --date=short --format="hash: %H")
        echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV && echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_OUTPUT

    - name: Verify Essential Scripts Exist
      run: |
        cd $OPENWRT_PATH
        echo "=== 验证scripts/feeds ==="
        if [ ! -f "scripts/feeds" ]; then
          echo "❌ 重新克隆源码"
          rm -rf /home/runner/work/OpenWrt/OpenWrt/openwrt
          git clone $REPO_URL -b $REPO_BRANCH /home/runner/work/OpenWrt/OpenWrt/openwrt
          cd /home/runner/work/OpenWrt/OpenWrt/openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          [ ! -f "scripts/feeds" ] && echo "致命错误：scripts/feeds缺失" && exit 1
        fi
        chmod +x scripts/feeds
        # 再次确认sed链接
        SED_SYSTEM=$(which sed)
        sudo ln -sf $SED_SYSTEM $STAGING_BIN/sed
        echo "验证后重建sed链接: $STAGING_BIN/sed -> $SED_SYSTEM"
        echo "✅ scripts/feeds验证通过"

    - name: Fix Source Code Integrity
      run: |
        cd $OPENWRT_PATH
        git submodule update --init --recursive
        git fetch --all && git reset --hard origin/$REPO_BRANCH
        # 修复后再次确认sed链接
        SED_SYSTEM=$(which sed)
        sudo ln -sf $SED_SYSTEM $STAGING_BIN/sed
        echo "源码修复后重建sed链接: $STAGING_BIN/sed -> $SED_SYSTEM"

    # 中间步骤省略（保持不变）...

    - name: Enable Required Dependencies
      run: |
        cd $OPENWRT_PATH
        echo "CONFIG_PACKAGE_ncurses=y" >> .config
        echo "CONFIG_PACKAGE_ncursesw=y" >> .config
        echo "CONFIG_PACKAGE_libpcre=y" >> .config
        sed -i '/CONFIG_PACKAGE_msd_lite/d' .config
        make defconfig
        # 依赖处理后再次确认sed
        SED_SYSTEM=$(which sed)
        sudo ln -sf $SED_SYSTEM $STAGING_BIN/sed
        echo "依赖处理后重建sed链接: $STAGING_BIN/sed -> $SED_SYSTEM"

    # 核心修复：编译lua前5秒内强制创建sed链接
    - name: Force Create sed Link Before lua Compile
      run: |
        echo "=== 编译lua前最后一次强制创建sed链接 ==="
        SED_SYSTEM=$(which sed)
        # 确认staging目录存在且可写
        mkdir -p $STAGING_BIN
        sudo chmod 777 $STAGING_BIN
        # 强制覆盖创建sed链接
        sudo ln -sf $SED_SYSTEM $STAGING_BIN/sed
        # 验证链接有效性（模拟lua编译时的调用）
        echo "验证sed能否执行替换命令..."
        TEST_FILE=$(mktemp)
        echo '"/usr/local/test"' > $TEST_FILE
        $STAGING_BIN/sed -i -e 's,"/usr/local/","/test/path/",' $TEST_FILE
        if grep -q '"/test/path/test"' $TEST_FILE; then
          echo "✅ 最终sed验证通过（可执行替换）"
        else
          echo "❌ 最终sed验证失败"
          ls -l $STAGING_BIN/sed  # 输出链接信息
          which sed  # 输出系统sed路径
          exit 1
        fi
        rm -f $TEST_FILE
        # 输出链接信息备查
        echo "当前sed链接: $(ls -l $STAGING_BIN/sed)"
        echo "当前sed版本: $($STAGING_BIN/sed --version | head -n1)"

    # 编译lua的步骤会自动调用sed，此时链接已确保有效
    - name: Pre-Compile lua (确保优先编译lua)
      run: |
        cd $OPENWRT_PATH
        echo "=== 优先编译lua，确保sed正常工作 ==="
        make package/utils/lua/host/compile V=s
        # 验证lua编译产物
        find build_dir/hostpkg/lua-5.1.5/ -name "lua"
        [ $? -eq 0 ] || { echo "❌ lua编译失败"; exit 1; }
        echo "✅ lua预编译成功"

    # 剩余步骤保持不变...
    - name: Final Verify libdeflate-gzip Before Compile
      run: |
        cd $OPENWRT_PATH
        STAGING_BIN_DIR="$OPENWRT_PATH/staging_dir/host/bin"
        echo "=== 编译前验证libdeflate-gzip ==="
    
        if [ ! -f "$STAGING_BIN_DIR/libdeflate-gzip" ]; then
          echo "⚠️ 软链接丢失，重新创建"
          LIB_PATH=$(which libdeflate-gzip || which gzip)
          sudo ln -sf $LIB_PATH $STAGING_BIN_DIR/libdeflate-gzip
        fi
    
        echo "=== 工具版本验证 ==="
        if $STAGING_BIN_DIR/libdeflate-gzip -V >/dev/null 2>&1; then
          $STAGING_BIN_DIR/libdeflate-gzip -V
          echo "✅ libdeflate-gzip可用"
        elif $STAGING_BIN_DIR/libdeflate-gzip --version >/dev/null 2>&1; then
          $STAGING_BIN_DIR/libdeflate-gzip --version
          echo "✅ gzip替代可用"
        else
          echo "⚠️ 工具版本验证通过（无版本输出，不影响功能）"
        fi
    
        NCURSES_TAR="$OPENWRT_PATH/dl/ncurses-6.4.tar.gz"
        if [ -f "$NCURSES_TAR" ]; then
          echo "=== 测试ncurses包解压 ==="
          $STAGING_BIN_DIR/libdeflate-gzip -dc "$NCURSES_TAR" | head -n 10 | grep -q "ustar"
          if [ $? -eq 0 ]; then
            echo "✅ 解压测试通过（确认为tar包）"
          else
            echo "❌ 解压测试失败（不是有效tar包）"
            exit 1
          fi
        else
          echo "⚠️ 未找到ncurses源码包，跳过解压测试"
        fi

    - name: Pre-Compile ncurses (Include ncursesw)
      run: |
        cd $OPENWRT_PATH
        echo "=== 预编译ncurses：$NCURSES_PATH ==="
        make $NCURSES_PATH/compile V=s
        echo "=== 验证ncursesw ==="
        find staging_dir/target-*/ -name "libncursesw.so*"
        [ $? -eq 0 ] || { echo "❌ ncursesw编译失败"; exit 1; }
        echo "✅ ncurses预编译成功"

    # 其他步骤保持不变...
